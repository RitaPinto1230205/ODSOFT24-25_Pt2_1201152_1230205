pipeline {
    agent any

    environment {
        // Definindo caminhos baseados no SO
        DOCKER_BINARY = isUnix() ? '/usr/local/bin/docker' : 'docker'
        MAVEN_BINARY = isUnix() ? (fileExists('/opt/homebrew/bin/mvn') ? '/opt/homebrew/bin/mvn' : '/usr/local/bin/mvn') : 'mvn'
        SERVER_PORT = '2226'
        IMAGE_NAME = 'lmsbooks'
        IMAGE_TAG = 'latest'
    }

    stages {
        stage('Check Environment') {
            steps {
                script {
                    echo "Running on: ${isUnix() ? 'Unix/Mac' : 'Windows'}"
                    echo "Maven path: ${MAVEN_BINARY}"
                    echo "Docker path: ${DOCKER_BINARY}"
                }
            }
        }

        stage('Clean') {
            steps {
                script {
                    if (isUnix()) {
                        sh "${MAVEN_BINARY} clean install"
                    } else {
                        bat "${MAVEN_BINARY} clean install"
                    }
                }
            }
        }

        stage('Check Docker') {
            steps {
                script {
                    if (isUnix()) {
                        sh """
                            echo "Verificando Docker..."
                            ${DOCKER_BINARY} --version
                            ${DOCKER_BINARY} info
                        """
                    } else {
                        bat """
                            echo "Verificando Docker..."
                            ${DOCKER_BINARY} --version
                            ${DOCKER_BINARY} info
                        """
                    }
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    if (isUnix()) {
                        sh "${DOCKER_BINARY} build -t ${IMAGE_NAME}:${IMAGE_TAG} ."
                    } else {
                        bat "${DOCKER_BINARY} build -t ${IMAGE_NAME}:${IMAGE_TAG} ."
                    }
                }
            }
        }

        stage('Deploy with Docker Compose') {
            steps {
                script {
                    if (isUnix()) {
                        sh """
                            if ! ${DOCKER_BINARY} ps --filter "name=rabbitmq_in_lms_network" --format '{{.Names}}' | grep -q rabbitmq_in_lms_network; then
                              ${DOCKER_BINARY} compose -f docker-compose-rabbitmq.yml up -d
                            else
                              echo "RabbitMQ container already running."
                            fi

                            if ! ${DOCKER_BINARY} ps --filter "name=postgres_in_lms_network" --format '{{.Names}}' | grep -q postgres_in_lms_network; then
                              ${DOCKER_BINARY} compose -f docker-compose-postgres.yml up -d
                            else
                              echo "Postgres container already running."
                            fi

                            ${DOCKER_BINARY} compose -f docker-compose.yml up -d --force-recreate
                        """
                    } else {
                        bat """
                            ${DOCKER_BINARY} compose -f docker-compose-rabbitmq.yml up -d
                            ${DOCKER_BINARY} compose -f docker-compose-postgres.yml up -d
                            ${DOCKER_BINARY} compose -f docker-compose.yml up -d --force-recreate
                        """
                    }
                }
            }
        }
    }

    post {
        success {
            echo 'Pipeline completed successfully!'
        }
        failure {
            echo 'Pipeline failed!'
        }
    }
}