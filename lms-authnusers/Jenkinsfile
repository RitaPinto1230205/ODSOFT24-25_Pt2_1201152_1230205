pipeline {
    agent any
    
    tools {
        jdk 'JDK21'
        maven 'Maven3'
    }
    
    environment {
        DOCKER_IMAGE = 'lmsusers'
        DOCKER_TAG = "${BUILD_NUMBER}"
        DOCKER_CREDENTIALS = credentials('docker-hub-credentials')
    }

    stages {
        stage('Checkout') {
            steps {
                script {
                    checkout scm
                }
            }
        }

        stage('Build') {
            steps {
                script {
                    if (isUnix()) {
                        sh 'mvn clean package -DskipTests'
                    } else {
                        bat 'mvn clean package -DskipTests'
                    }
                }
            }
        }

        stage('Test') {
            steps {
                script {
                    if (isUnix()) {
                        sh 'mvn test'
                    } else {
                        bat 'mvn test'
                    }
                }
            }
            post {
                always {
                    junit '**/target/surefire-reports/*.xml'
                }
            }
        }

        stage('SonarQube Analysis') {
            steps {
                script {
                    withSonarQubeEnv('SonarQube') {
                        if (isUnix()) {
                            sh 'mvn sonar:sonar'
                        } else {
                            bat 'mvn sonar:sonar'
                        }
                    }
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    if (isUnix()) {
                        sh "docker build -t ${DOCKER_IMAGE}:${DOCKER_TAG} ."
                    } else {
                        bat "docker build -t ${DOCKER_IMAGE}:${DOCKER_TAG} ."
                    }
                }
            }
        }

        stage('Push Docker Image') {
            steps {
                script {
                    docker.withRegistry('https://registry.hub.docker.com', 'docker-hub-credentials') {
                        if (isUnix()) {
                            sh """
                                docker push ${DOCKER_IMAGE}:${DOCKER_TAG}
                                docker tag ${DOCKER_IMAGE}:${DOCKER_TAG} ${DOCKER_IMAGE}:latest
                                docker push ${DOCKER_IMAGE}:latest
                            """
                        } else {
                            bat """
                                docker push ${DOCKER_IMAGE}:${DOCKER_TAG}
                                docker tag ${DOCKER_IMAGE}:${DOCKER_TAG} ${DOCKER_IMAGE}:latest
                                docker push ${DOCKER_IMAGE}:latest
                            """
                        }
                    }
                }
            }
        }

        stage('Deploy') {
            steps {
                script {
                    if (env.BRANCH_NAME == 'develop') {
                        echo 'Deploying to development environment...'
                        if (isUnix()) {
                            sh 'echo "Unix deployment commands here"'
                        } else {
                            bat 'echo "Windows deployment commands here"'
                        }
                    } else if (env.BRANCH_NAME == 'main') {
                        echo 'Deploying to production environment...'
                        if (isUnix()) {
                            sh 'echo "Unix production deployment commands here"'
                        } else {
                            bat 'echo "Windows production deployment commands here"'
                        }
                    }
                }
            }
        }
    }

    post {
        always {
            cleanWs()
        }
        success {
            script {
                if (isUnix()) {
                    sh 'echo "Build succeeded on Unix!"'
                } else {
                    bat 'echo "Build succeeded on Windows!"'
                }
            }
        }
        failure {
            script {
                if (isUnix()) {
                    sh 'echo "Build failed on Unix!"'
                } else {
                    bat 'echo "Build failed on Windows!"'
                }
            }
        }
    }
}